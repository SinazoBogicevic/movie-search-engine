{"version":3,"sources":["DataContext.js","GenreContext.js","MoviePage.js","MovieCard.js","SearchField.js","App.js","serviceWorker.js","index.js"],"names":["DataContext","createContext","DataProvider","props","useState","state","setState","Provider","value","children","GenreContext","GenreProvider","genres","setGenres","MoviePage","useContext","film","setFilm","genreList","useEffect","data","localStorage","getItem","prevState","e","console","log","setItem","JSON","stringify","tempIds","genre_ids","k","length","obj","id","i","push","Wrapper","className","to","style","textDecoration","class","src","poster_path","alt","title","original_language","vote_average","release_date","map","item","overview","styled","div","MovieCard","movie","handleDetail","Card","onClick","singleMovie","handleClick","color","SearchField","query","setQuery","movieList","setMovies","searchMovies","a","preventDefault","string","replace","url","fetch","res","json","results","getMovieDetail","find","fetchGenres","parse","Container","onSubmit","type","placeholder","name","onChange","target","key","App","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b7f2f42a.chunk.js","sourcesContent":["import React, { createContext, useState } from \"react\";\r\n\r\nconst DataContext = createContext([{}, () => {}]);\r\n\r\nconst DataProvider = (props) => {\r\n  const [state, setState] = useState({});\r\n\r\n  return (\r\n    <DataContext.Provider value={[state, setState]}>\r\n      {props.children}\r\n    </DataContext.Provider>\r\n  );\r\n};\r\n\r\nexport { DataContext, DataProvider };\r\n","import React, { createContext, useState } from \"react\";\r\n\r\nconst GenreContext = createContext([{}, () => {}]);\r\n\r\nconst GenreProvider = (props) => {\r\n  const [genres, setGenres] = useState({});\r\n\r\n  return (\r\n    <GenreContext.Provider value={[genres, setGenres]}>\r\n      {props.children}\r\n    </GenreContext.Provider>\r\n  );\r\n};\r\n\r\nexport { GenreContext, GenreProvider };\r\n","import React, { useContext, useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { DataContext } from \"./DataContext\";\r\nimport { GenreContext } from \"./GenreContext\";\r\n//import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nexport default function MoviePage() {\r\n  const [state, setState] = useContext(DataContext);\r\n  const [film, setFilm] = useState({});\r\n  const [genres] = useContext(GenreContext);\r\n  const genreList = [];\r\n  //const arrow = <FontAwesomeIcon icon=\"arrow-alt-circle-left\" />;\r\n\r\n  useEffect(() => {\r\n    const data = localStorage.getItem(\"moviePage\");\r\n\r\n    try {\r\n      if (data) {\r\n        setFilm((prevState) => ({ state: prevState }));\r\n      }\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"moviePage\", JSON.stringify(state));\r\n  }, [state]);\r\n\r\n  useEffect(() => setFilm(state), [state]);\r\n\r\n  const tempIds = film.genre_ids;\r\n  if (tempIds != null) {\r\n    for (let k = 0; k < genres.length; k++) {\r\n      const obj = genres[k];\r\n      const id = obj[\"id\"];\r\n      for (let i = 0; i < tempIds.length; i++) {\r\n        if (id === tempIds[i]) {\r\n          genreList.push(obj[\"name\"]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      <div className=\"arrow\">\r\n        <Link to=\"/\" style={{ textDecoration: \"none\" }}>\r\n          <i class=\"fas fa-long-arrow-alt-left\"></i>\r\n        </Link>\r\n      </div>\r\n      <div className=\"movieContainer\">\r\n        <img\r\n          src={\r\n            \"https://image.tmdb.org/t/p/w185_and_h278_bestv2/\" +\r\n            film.poster_path\r\n          }\r\n          alt={film.title + \" poster\"}\r\n        />\r\n        <div className=\"info\">\r\n          <h5 className=\"title\">{film.title}</h5>\r\n          <ul className=\"list\">\r\n            <li>{film.original_language}</li>\r\n            <li>{film.vote_average} rating</li>\r\n            <li>{film.release_date}</li>\r\n          </ul>\r\n          <ul className=\"list\">\r\n            {genreList.map((item) => (\r\n              <li>{item}</li>\r\n            ))}\r\n          </ul>\r\n          <p className=\"overview\">{film.overview}</p>\r\n        </div>\r\n      </div>\r\n    </Wrapper>\r\n  );\r\n}\r\nconst Wrapper = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  margin-top: 15px;\r\n  .arrow {\r\n    width: 10%;\r\n    height: 15%;\r\n    text-align: center;\r\n    font-size: 1.2rem;\r\n  }\r\n  .movieContainer {\r\n    width: 65%;\r\n    margin: 10px auto;\r\n  }\r\n  img {\r\n    width: 100%;\r\n  }\r\n  .title {\r\n    text-align: center;\r\n    font-size: 1.2rem;\r\n  }\r\n  .list {\r\n    list-style-type: none;\r\n    padding-left: 0px;\r\n  }\r\n  @media screen and (min-width: 768px) {\r\n    .movieContainer {\r\n      display: grid;\r\n      grid-template-columns: auto 1fr;\r\n      grid-template-rows: auto 1fr;\r\n      border: 1px solid rgb(0, 0, 0, 0.1);\r\n      box-shadow: 0px 2px 8px rgb(0, 0, 0, 0.1);\r\n    }\r\n    img {\r\n      border: 2px solid #e3e3e3;\r\n      border-radius: 18px;\r\n      box-shadow: 0px 2px 8px rgb(0, 0, 0, 0.1);\r\n    }\r\n    .title {\r\n      text-align: left;\r\n      margin-top: 0px;\r\n    }\r\n    .info {\r\n      grid-column: 2/3;\r\n      grid-column: 2/3;\r\n      margin-left: 15px;\r\n    }\r\n  }\r\n`;\r\n","import React, { useState, useContext } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { DataContext } from \"./DataContext\";\r\n\r\nexport default function MovieCard({ movie, handleDetail }) {\r\n  const [state, setState] = useContext(DataContext);\r\n\r\n  const handleClick = (id) => {\r\n    const singleMovie = handleDetail(movie.id);\r\n    setState(singleMovie);\r\n  };\r\n\r\n  return (\r\n    <Card className=\"card-list\" onClick={() => handleClick(movie.id)}>\r\n      <Link\r\n        to=\"/moviePage\"\r\n        style={{ textDecoration: \"none\", color: \"#0000ff\" }}\r\n      >\r\n        <img\r\n          src={\r\n            \"https://image.tmdb.org/t/p/w185_and_h278_bestv2/\" +\r\n            movie.poster_path\r\n          }\r\n          alt={movie.title + \" poster\"}\r\n        />\r\n        <h5>{movie.title}</h5>\r\n        <p>{movie.release_date}</p>\r\n        <div className=\"rating\">{movie.vote_average}</div>\r\n      </Link>\r\n    </Card>\r\n  );\r\n}\r\nconst Card = styled.div`\r\n  position: relative;\r\n  text-align: left;\r\n  cursor: pointer;\r\n  overflow: hidden;\r\n  background-color: #fffff;\r\n  width: 65%;\r\n  margin: 0 auto 12px;\r\n  border-radius: 8px;\r\n  border: 1px solid #e3e3e3;\r\n  box-shadow: 0px 2px 8px rgb(0, 0, 0, 0.1);\r\n  img {\r\n    width: 100%;\r\n    height: 50vh;\r\n  }\r\n  h5 {\r\n    margin-bottom: 0px;\r\n  }\r\n  p {\r\n    margin-top: 2px;\r\n  }\r\n  .rating {\r\n    text-align: center;\r\n    position: absolute;\r\n    bottom: 22%;\r\n    left: 8%;\r\n    width: 35px;\r\n    height: 35px;\r\n    border: 1px solid white;\r\n    color: white;\r\n    border-radius: 50%;\r\n    background-color: black;\r\n  }\r\n`;\r\n","import React, { useState, useContext, useEffect } from \"react\";\r\nimport MovieCard from \"./MovieCard\";\r\nimport styled from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { GenreContext } from \"./GenreContext\";\r\n\r\nexport default function SearchField() {\r\n  const [query, setQuery] = useState(\"\");\r\n  const [movieList, setMovies] = useState([]);\r\n  const [genres, setGenres] = useContext(GenreContext);\r\n\r\n  const searchMovies = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const string = query.replace(\" \", \"+\");\r\n    setQuery(string);\r\n    const url = `https://api.themoviedb.org/3/search/movie?api_key=396dea73ba4dc94c515ba23f832b0ede&language=en-US&query=${string}&page=1&include_adult=false`;\r\n\r\n    try {\r\n      const res = await fetch(url);\r\n      const data = await res.json();\r\n      setMovies(data.results);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  const getMovieDetail = (id) => {\r\n    const film = movieList.find((item) => item.id === id);\r\n    return film;\r\n  };\r\n\r\n  useEffect(() => {\r\n    async function fetchGenres() {\r\n      const res = await fetch(\r\n        \"https://api.themoviedb.org/3/genre/movie/list?api_key=396dea73ba4dc94c515ba23f832b0ede&language=en-US\"\r\n      );\r\n      const data = await res.json();\r\n      setGenres(data.genres);\r\n    }\r\n    fetchGenres();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const data = localStorage.getItem(\"search-results\");\r\n    try {\r\n      if (data) {\r\n        setMovies(JSON.parse(data));\r\n      }\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"search-results\", JSON.stringify(movieList));\r\n  }, [movieList]);\r\n\r\n  return (\r\n    <Container>\r\n      <div>\r\n        <h1 className=\"title\">\r\n          <Link to=\"/\" style={{ textDecoration: \"none\", color: \"#0000ff\" }}>\r\n            Movie Search\r\n          </Link>\r\n        </h1>\r\n        <form className=\"form\" onSubmit={searchMovies}>\r\n          <label className=\"label\">Movie</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"i.e Hunger Games\"\r\n            name=\"query\"\r\n            value={query}\r\n            onChange={(e) => setQuery(e.target.value)}\r\n          />\r\n          <button type=\"submit\">Search</button>\r\n        </form>\r\n      </div>\r\n      <div className=\"movie-list\">\r\n        {movieList.map((movie) => (\r\n          <MovieCard\r\n            movie={movie}\r\n            key={movie.id}\r\n            handleDetail={getMovieDetail}\r\n          />\r\n        ))}\r\n      </div>\r\n    </Container>\r\n  );\r\n}\r\n\r\nconst Container = styled.div`\r\n  width: 80%;\r\n  margin: 0 auto;\r\n  text-align: center;\r\n  .form {\r\n    display: grid;\r\n  }\r\n  .label {\r\n    margin-bottom: 0.5rem;\r\n    fontsize: 1.5rem;\r\n  }\r\n  input[type=\"text\"] {\r\n    margin-bottom: 0.5rem;\r\n    padding: 10px;\r\n    border: 2px solid black;\r\n    border-radius: 20px;\r\n  }\r\n  button {\r\n    padding: 10px;\r\n    border: 2px solid black;\r\n    border-radius: 20px;\r\n    background: rgb(0, 0, 0, 0.75);\r\n    cursor: pointer;\r\n    color: white;\r\n    fontsize: 1.2rem;\r\n    margin-bottom: 12px;\r\n    &:hover {\r\n      background: rgb(0, 0, 0, 0.85);\r\n    }\r\n  }\r\n  @media screen and (min-width: 786px) {\r\n    .form {\r\n      grid-template-columns: auto 1fr auto;\r\n      grid-gap: 1rem;\r\n    }\r\n    .label,\r\n    input[type=\"text\"] {\r\n      margin-bottom: 0px;\r\n    }\r\n    form {\r\n      margin-bottom: 2rem;\r\n    }\r\n    .movie-list {\r\n      display: grid;\r\n      grid-template-columns: repeat(3, 1fr);\r\n    }\r\n  }\r\n`;\r\n","import React from \"react\";\nimport MoviePage from \"./MoviePage\";\nimport SearchField from \"./SearchField\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { DataProvider } from \"./DataContext\";\nimport { GenreProvider } from \"./GenreContext\";\nexport default function App() {\n  return (\n    <DataProvider>\n      <GenreProvider>\n        <Router>\n          <Switch>\n            <Route path=\"/moviePage\" component={MoviePage}>\n              <MoviePage />\n            </Route>\n            <Route exact path=\"/\" component={SearchField}>\n              <SearchField />\n            </Route>\n          </Switch>\n        </Router>\n      </GenreProvider>\n    </DataProvider>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}